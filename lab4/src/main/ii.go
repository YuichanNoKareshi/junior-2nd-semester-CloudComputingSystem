package main

import (
	"fmt"
	"mapreduce"
	"os"
	"strings"
	"strconv"
	"unicode"
)

func removeRepByMap(slc []string) []string {
    result := []string{}         //存放返回的不重复切片
    tempMap := map[string]byte{} // 存放不重复主键
    for _, e := range slc {
        l := len(tempMap)
        tempMap[e] = 0 //当e存在于tempMap中时，再次添加是添加不进去的，，因为key不允许重复
        //如果上一行添加成功，那么长度发生变化且此时元素一定不重复
        if len(tempMap) != l { // 加入map后，map长度变化，则元素不重复
            result = append(result, e) //当元素不重复时，将元素添加到切片result中
        }
    }
    return result
}

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// Your code here (Part V).
	
	values := strings.FieldsFunc(value, func(r rune) bool {
		return !unicode.IsLetter(r)  // remove all characters that is not a letter
	})
	values = removeRepByMap(values)

	var kvpairs [] mapreduce.KeyValue
	for i := range values{
		kvpair := mapreduce.KeyValue{values[i],document}
		kvpairs = append(kvpairs, kvpair)
	}

	return kvpairs
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// Your code here (Part V).
	ret := strconv.Itoa(len(values)) + " "
	for i := range values{
		ret = ret + values[i]
		
		if i != len(values)-1{
			ret = ret + ","
		}
	}

	return ret
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
